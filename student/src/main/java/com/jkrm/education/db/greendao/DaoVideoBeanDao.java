package com.jkrm.education.db.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.jkrm.education.db.DaoVideoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAO_VIDEO_BEAN".
*/
public class DaoVideoBeanDao extends AbstractDao<DaoVideoBean, String> {

    public static final String TABLENAME = "DAO_VIDEO_BEAN";

    /**
     * Properties of entity DaoVideoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Brief = new Property(1, String.class, "brief", false, "BRIEF");
        public final static Property CatalogId = new Property(2, String.class, "catalogId", false, "CATALOG_ID");
        public final static Property Face = new Property(3, String.class, "face", false, "FACE");
        public final static Property FaceId = new Property(4, String.class, "faceId", false, "FACE_ID");
        public final static Property Ids = new Property(5, String.class, "ids", false, "IDS");
        public final static Property MainCourse = new Property(6, String.class, "mainCourse", false, "MAIN_COURSE");
        public final static Property MlessonId = new Property(7, String.class, "mlessonId", false, "MLESSON_ID");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property OneId = new Property(9, String.class, "oneId", false, "ONE_ID");
        public final static Property PcvId = new Property(10, String.class, "pcvId", false, "PCV_ID");
        public final static Property Price = new Property(11, String.class, "price", false, "PRICE");
        public final static Property Size = new Property(12, String.class, "size", false, "SIZE");
        public final static Property TeacherId = new Property(13, String.class, "teacherId", false, "TEACHER_ID");
        public final static Property TeacherName = new Property(14, String.class, "teacherName", false, "TEACHER_NAME");
        public final static Property Times = new Property(15, String.class, "times", false, "TIMES");
        public final static Property TwoId = new Property(16, String.class, "twoId", false, "TWO_ID");
        public final static Property Type = new Property(17, String.class, "type", false, "TYPE");
        public final static Property UpdateTime = new Property(18, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Url = new Property(19, String.class, "url", false, "URL");
        public final static Property VideoId = new Property(20, String.class, "videoId", false, "VIDEO_ID");
        public final static Property WhetherBuy = new Property(21, String.class, "whetherBuy", false, "WHETHER_BUY");
        public final static Property WhetherFree = new Property(22, String.class, "whetherFree", false, "WHETHER_FREE");
        public final static Property FileName = new Property(23, String.class, "fileName", false, "FILE_NAME");
        public final static Property FilePath = new Property(24, String.class, "filePath", false, "FILE_PATH");
        public final static Property DownloadStatus = new Property(25, String.class, "downloadStatus", false, "DOWNLOAD_STATUS");
        public final static Property Total = new Property(26, long.class, "total", false, "TOTAL");
        public final static Property Progress = new Property(27, long.class, "progress", false, "PROGRESS");
        public final static Property IsCheck = new Property(28, boolean.class, "isCheck", false, "IS_CHECK");
    }

    private Query<DaoVideoBean> daoCatalogueBean_MVideoBeanListQuery;

    public DaoVideoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DaoVideoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAO_VIDEO_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"BRIEF\" TEXT," + // 1: brief
                "\"CATALOG_ID\" TEXT," + // 2: catalogId
                "\"FACE\" TEXT," + // 3: face
                "\"FACE_ID\" TEXT," + // 4: faceId
                "\"IDS\" TEXT," + // 5: ids
                "\"MAIN_COURSE\" TEXT," + // 6: mainCourse
                "\"MLESSON_ID\" TEXT," + // 7: mlessonId
                "\"NAME\" TEXT," + // 8: name
                "\"ONE_ID\" TEXT," + // 9: oneId
                "\"PCV_ID\" TEXT," + // 10: pcvId
                "\"PRICE\" TEXT," + // 11: price
                "\"SIZE\" TEXT," + // 12: size
                "\"TEACHER_ID\" TEXT," + // 13: teacherId
                "\"TEACHER_NAME\" TEXT," + // 14: teacherName
                "\"TIMES\" TEXT," + // 15: times
                "\"TWO_ID\" TEXT," + // 16: twoId
                "\"TYPE\" TEXT," + // 17: type
                "\"UPDATE_TIME\" TEXT," + // 18: updateTime
                "\"URL\" TEXT," + // 19: url
                "\"VIDEO_ID\" TEXT," + // 20: videoId
                "\"WHETHER_BUY\" TEXT," + // 21: whetherBuy
                "\"WHETHER_FREE\" TEXT," + // 22: whetherFree
                "\"FILE_NAME\" TEXT," + // 23: fileName
                "\"FILE_PATH\" TEXT," + // 24: filePath
                "\"DOWNLOAD_STATUS\" TEXT," + // 25: downloadStatus
                "\"TOTAL\" INTEGER NOT NULL ," + // 26: total
                "\"PROGRESS\" INTEGER NOT NULL ," + // 27: progress
                "\"IS_CHECK\" INTEGER NOT NULL );"); // 28: isCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAO_VIDEO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DaoVideoBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(2, brief);
        }
 
        String catalogId = entity.getCatalogId();
        if (catalogId != null) {
            stmt.bindString(3, catalogId);
        }
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(4, face);
        }
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(5, faceId);
        }
 
        String ids = entity.getIds();
        if (ids != null) {
            stmt.bindString(6, ids);
        }
 
        String mainCourse = entity.getMainCourse();
        if (mainCourse != null) {
            stmt.bindString(7, mainCourse);
        }
 
        String mlessonId = entity.getMlessonId();
        if (mlessonId != null) {
            stmt.bindString(8, mlessonId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String oneId = entity.getOneId();
        if (oneId != null) {
            stmt.bindString(10, oneId);
        }
 
        String pcvId = entity.getPcvId();
        if (pcvId != null) {
            stmt.bindString(11, pcvId);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(12, price);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(13, size);
        }
 
        String teacherId = entity.getTeacherId();
        if (teacherId != null) {
            stmt.bindString(14, teacherId);
        }
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(15, teacherName);
        }
 
        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(16, times);
        }
 
        String twoId = entity.getTwoId();
        if (twoId != null) {
            stmt.bindString(17, twoId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(18, type);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(19, updateTime);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(20, url);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(21, videoId);
        }
 
        String whetherBuy = entity.getWhetherBuy();
        if (whetherBuy != null) {
            stmt.bindString(22, whetherBuy);
        }
 
        String whetherFree = entity.getWhetherFree();
        if (whetherFree != null) {
            stmt.bindString(23, whetherFree);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(24, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(25, filePath);
        }
 
        String downloadStatus = entity.getDownloadStatus();
        if (downloadStatus != null) {
            stmt.bindString(26, downloadStatus);
        }
        stmt.bindLong(27, entity.getTotal());
        stmt.bindLong(28, entity.getProgress());
        stmt.bindLong(29, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DaoVideoBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String brief = entity.getBrief();
        if (brief != null) {
            stmt.bindString(2, brief);
        }
 
        String catalogId = entity.getCatalogId();
        if (catalogId != null) {
            stmt.bindString(3, catalogId);
        }
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(4, face);
        }
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(5, faceId);
        }
 
        String ids = entity.getIds();
        if (ids != null) {
            stmt.bindString(6, ids);
        }
 
        String mainCourse = entity.getMainCourse();
        if (mainCourse != null) {
            stmt.bindString(7, mainCourse);
        }
 
        String mlessonId = entity.getMlessonId();
        if (mlessonId != null) {
            stmt.bindString(8, mlessonId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String oneId = entity.getOneId();
        if (oneId != null) {
            stmt.bindString(10, oneId);
        }
 
        String pcvId = entity.getPcvId();
        if (pcvId != null) {
            stmt.bindString(11, pcvId);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(12, price);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(13, size);
        }
 
        String teacherId = entity.getTeacherId();
        if (teacherId != null) {
            stmt.bindString(14, teacherId);
        }
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(15, teacherName);
        }
 
        String times = entity.getTimes();
        if (times != null) {
            stmt.bindString(16, times);
        }
 
        String twoId = entity.getTwoId();
        if (twoId != null) {
            stmt.bindString(17, twoId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(18, type);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(19, updateTime);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(20, url);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(21, videoId);
        }
 
        String whetherBuy = entity.getWhetherBuy();
        if (whetherBuy != null) {
            stmt.bindString(22, whetherBuy);
        }
 
        String whetherFree = entity.getWhetherFree();
        if (whetherFree != null) {
            stmt.bindString(23, whetherFree);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(24, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(25, filePath);
        }
 
        String downloadStatus = entity.getDownloadStatus();
        if (downloadStatus != null) {
            stmt.bindString(26, downloadStatus);
        }
        stmt.bindLong(27, entity.getTotal());
        stmt.bindLong(28, entity.getProgress());
        stmt.bindLong(29, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DaoVideoBean readEntity(Cursor cursor, int offset) {
        DaoVideoBean entity = new DaoVideoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // brief
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // catalogId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // face
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // faceId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ids
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mainCourse
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mlessonId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // oneId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pcvId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // price
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // size
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // teacherId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // teacherName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // times
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // twoId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // type
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // updateTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // url
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // videoId
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // whetherBuy
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // whetherFree
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // fileName
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // filePath
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // downloadStatus
            cursor.getLong(offset + 26), // total
            cursor.getLong(offset + 27), // progress
            cursor.getShort(offset + 28) != 0 // isCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DaoVideoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBrief(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCatalogId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFace(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFaceId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIds(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMainCourse(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMlessonId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOneId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPcvId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPrice(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSize(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTeacherId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTeacherName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTimes(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTwoId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUpdateTime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUrl(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setVideoId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setWhetherBuy(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setWhetherFree(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFileName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setFilePath(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDownloadStatus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTotal(cursor.getLong(offset + 26));
        entity.setProgress(cursor.getLong(offset + 27));
        entity.setIsCheck(cursor.getShort(offset + 28) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(DaoVideoBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DaoVideoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DaoVideoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mVideoBeanList" to-many relationship of DaoCatalogueBean. */
    public List<DaoVideoBean> _queryDaoCatalogueBean_MVideoBeanList(String catalogId) {
        synchronized (this) {
            if (daoCatalogueBean_MVideoBeanListQuery == null) {
                QueryBuilder<DaoVideoBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CatalogId.eq(null));
                daoCatalogueBean_MVideoBeanListQuery = queryBuilder.build();
            }
        }
        Query<DaoVideoBean> query = daoCatalogueBean_MVideoBeanListQuery.forCurrentThread();
        query.setParameter(0, catalogId);
        return query.list();
    }

}
