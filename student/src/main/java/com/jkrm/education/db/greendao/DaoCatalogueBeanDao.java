package com.jkrm.education.db.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.jkrm.education.db.DaoCatalogueBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAO_CATALOGUE_BEAN".
*/
public class DaoCatalogueBeanDao extends AbstractDao<DaoCatalogueBean, String> {

    public static final String TABLENAME = "DAO_CATALOGUE_BEAN";

    /**
     * Properties of entity DaoCatalogueBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property MlessonId = new Property(2, String.class, "mlessonId", false, "MLESSON_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property ParentId = new Property(4, String.class, "parentId", false, "PARENT_ID");
        public final static Property PcvId = new Property(5, String.class, "pcvId", false, "PCV_ID");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property IsCheck = new Property(7, boolean.class, "isCheck", false, "IS_CHECK");
    }

    private DaoSession daoSession;

    private Query<DaoCatalogueBean> daoMicroLessonBean_ListQuery;

    public DaoCatalogueBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DaoCatalogueBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAO_CATALOGUE_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"KEY\" TEXT," + // 1: key
                "\"MLESSON_ID\" TEXT," + // 2: mlessonId
                "\"NAME\" TEXT," + // 3: name
                "\"PARENT_ID\" TEXT," + // 4: parentId
                "\"PCV_ID\" TEXT," + // 5: pcvId
                "\"TITLE\" TEXT," + // 6: title
                "\"IS_CHECK\" INTEGER NOT NULL );"); // 7: isCheck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAO_CATALOGUE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DaoCatalogueBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        String mlessonId = entity.getMlessonId();
        if (mlessonId != null) {
            stmt.bindString(3, mlessonId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(5, parentId);
        }
 
        String pcvId = entity.getPcvId();
        if (pcvId != null) {
            stmt.bindString(6, pcvId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindLong(8, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DaoCatalogueBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(2, key);
        }
 
        String mlessonId = entity.getMlessonId();
        if (mlessonId != null) {
            stmt.bindString(3, mlessonId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(5, parentId);
        }
 
        String pcvId = entity.getPcvId();
        if (pcvId != null) {
            stmt.bindString(6, pcvId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindLong(8, entity.getIsCheck() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(DaoCatalogueBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DaoCatalogueBean readEntity(Cursor cursor, int offset) {
        DaoCatalogueBean entity = new DaoCatalogueBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // key
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mlessonId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parentId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pcvId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.getShort(offset + 7) != 0 // isCheck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DaoCatalogueBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setKey(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMlessonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setParentId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPcvId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsCheck(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(DaoCatalogueBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(DaoCatalogueBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DaoCatalogueBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "list" to-many relationship of DaoMicroLessonBean. */
    public List<DaoCatalogueBean> _queryDaoMicroLessonBean_List(String mlessonId) {
        synchronized (this) {
            if (daoMicroLessonBean_ListQuery == null) {
                QueryBuilder<DaoCatalogueBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MlessonId.eq(null));
                daoMicroLessonBean_ListQuery = queryBuilder.build();
            }
        }
        Query<DaoCatalogueBean> query = daoMicroLessonBean_ListQuery.forCurrentThread();
        query.setParameter(0, mlessonId);
        return query.list();
    }

}
